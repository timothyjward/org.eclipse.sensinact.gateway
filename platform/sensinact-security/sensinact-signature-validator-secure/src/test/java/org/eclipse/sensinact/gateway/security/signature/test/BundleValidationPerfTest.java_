package fr.inria.ares;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import java.util.Calendar;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

import java.security.InvalidKeyException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SignatureException;
import java.security.cert.CertStoreException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateExpiredException;
import java.security.cert.CertificateNotYetValidException;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import org.bouncycastle.cms.CMSException;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

import org.eclipse.sensinact.gateway.security.signature.api.BundleValidation;
import org.eclipse.sensinact.gateway.security.signature.api.BundleValidationException;
import BundleValidationImpl;
import CryptographicUtils;
import KeyStoreManager;
import org.eclipse.sensinact.gateway.security.signature.internal.SignedBundleCheckerTester;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

/*
 * signature validation with embedded archive: embedded archives are to be signed by the same signer as the main archive
 * testCheckNOKWithEmbeddedArchive not performed
 */

public class BundleValidationPerfTest
{

	private static BundleValidation jval = null;
	private static String defaultKeystoreFile = "target/test-classes/data/keystore";
	private String keyStorePasswd = "keystore";
	private String signedFileName = "target/test-classes/data/signed/bindex-1.0.jar";
	private String bigFile = "target/test-classes/data/bigFile/bcprov-jdk15-1.3.1.signed.jar";
	private String noFileName = "noFile.jar";

	private String unsignedFileName = "target/test-classes/data/securityLayer.jar";
	private String severalSignersFileName = "target/test-classes/data/sosgiLib.jar";
	private String severalUnvalidSignersFileName = "target/test-classes/data/erroneousSignature2/sosgiLib.jar";
	private String encryptionFileName = "target/test-classes/data/securefelix.jar";
	private String targetEncryptedFileName = encryptionFileName + ".crypt";
	private String targetDecryptedFileName = encryptionFileName + ".decrypt";

	private String bundleWithEmbeddedArchive = "target/test-classes/data/edtftpj4felix.jar";
	private String bundleWithUnsignedEmbeddedArchive = "target/test-classes/data/edtftpj4felix-badsigned.jar";

	private final Logger logger;

	public BundleValidationPerfTest()
	        throws FileNotFoundException, NoSuchAlgorithmException
	{
		jval = new BundleValidationImpl(co, ksm);
		logger = Logger.getLogger(BundleValidationPerfTest.class.getName());
		System.out.println("Beware: test are to be done with jarSigner tests");
	}

	private boolean checkFile(String fileName) throws Exception
	{
		File f = new File(fileName);

		long beginning = Calendar.getInstance().getTimeInMillis();

		boolean result = jval.check(f, keyStorePasswd);

		this.showDuration(beginning, fileName);

		return result;
	}

	private void showDuration(final long beginning, final String task)
	{
		long end = Calendar.getInstance().getTimeInMillis();

		logger.log(Level.DEBUG, "beginning: " + beginning);
		logger.log(Level.DEBUG, "end: " + end);

		long duration = end - beginning;

		logger.log(Level.DEBUG,
		        "duration for " + task + ": " + duration + " ms.");
	}

	/*
	 * required approximately 1,65 second
	 */
	public void testCheckOK()
	{
		logger.log(Level.DEBUG, "This is a valid Perf Test");
		try
		{
			boolean res = this.checkFile(signedFileName);
			logger.log(Level.INFO, "testCheckOK: " + res);
			Assert.assertTrue(res);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	/*
	 * disabled for subversion performance reason
	 */
	public void notestCheckBigFileOK()
	{
		logger.log(Level.DEBUG, "This is a valid Perf Test for a big file");
		try
		{
			boolean res = this.checkFile(bigFile);
			logger.log(Level.INFO, "testCheckBigFileOK: " + res);
			Assert.assertTrue(res);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	private boolean checkHashValues(String fileName)
	{
		boolean result = false;
		try
		{
			JarFile jar = new JarFile(fileName);
			Manifest manifest = jar.getManifest();
			CryptographicUtils cryptoUtils = new CryptographicUtils();

			long beginning = Calendar.getInstance().getTimeInMillis();

			result = SignedBundleCheckerTester.checkHashValuesValid(jar,
			        manifest, cryptoUtils);
			this.showDuration(beginning, fileName);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return result;
	}

	public void testHashValueCheck()
	{
		logger.log(Level.DEBUG, "This is a Perf Test for check of hash values");
		boolean result = this.checkHashValues(signedFileName);
		logger.log(Level.INFO, "testHashValueCheck: " + result);
		Assert.assertTrue(result);
	}

	/*
	 * disabled for subversion performance reason
	 */
	public void notestHashValueCheckBigFile()
	{
		logger.log(Level.DEBUG,
		        "This is a Perf Test for check of hash values" + " - big file");
		boolean result = this.checkHashValues(bigFile);
		logger.log(Level.INFO, "testHashValueCheckBigFile: " + result);
		Assert.assertTrue(result);
	}

	public void testCheckNoFile()
	{
		logger.log(Level.DEBUG, "This is a Perf Test for no file");
		try
		{
			boolean noFile = this.checkFile(noFileName);
			logger.log(Level.INFO, "no file is valid: " + noFile);
			Assert.assertFalse(noFile);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
}
